{{ if .Values.rest.enabled }}
{{ if .Values.rest.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-oso-services.labels" . | indent 4 }}
    component: {{ .Values.rest.component }}
    function: {{ .Values.rest.function }}
    domain: {{ .Values.rest.domain }}
    intent: production
  annotations:
spec:
  rules:
    - http:
        paths:
          - path: /{{ .Release.Namespace }}/oso/api
            pathType: Prefix
            backend:
              service:
                name: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}
                port:
                  number: 5000
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-oso-services.labels" . | indent 4 }}
    component: {{ .Values.rest.component }}
    function: {{ .Values.rest.function }}
    domain: {{ .Values.rest.domain }}
    intent: production
spec:
  ports:
  - port: 5000
  selector:
    app: {{ template "ska-oso-services.name" . }}
    component: {{ .Values.rest.component }}
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  provider: {{ .Values.secretProvider.provider.name }}
  parameters:
    vaultAddress: {{ .Values.secretProvider.provider.vaultAddress }}
    roleName: {{ .Values.secretProvider.provider.roleName }}
    objects: |
{{- range .Values.secretProvider.provider.secrets }}
      - objectName: {{ .secretKey }}
        secretPath: {{ $.Values.secretProvider.provider.secretsPath }}
        secretKey: {{ .secretKey }}
{{- end }}
  secretObjects:
    - secretName: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}-bucket-credentials
      type: Opaque
      data:
{{- range .Values.secretProvider.provider.secrets }}
        - objectName: {{ .secretKey }}
          key: {{ .secretKey }}
{{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-oso-services.labels" . | indent 4 }}
    component: {{ .Values.rest.component }}
    function: {{ .Values.rest.function }}
    domain: {{ .Values.rest.domain }}
    intent: production
spec:
  selector:
    matchLabels:
      app: {{ template "ska-oso-services.name" . }}
      component: {{ .Values.rest.component }}
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "ska-oso-services.labels" . | indent 8 }}
        component: {{ .Values.rest.component }}
        function: {{ .Values.rest.function }}
        domain: {{ .Values.rest.domain }}
        intent: production
    spec:
      containers:
      - name: oso-services
        image: "{{ .Values.rest.image.registry }}/{{ .Values.rest.image.image }}:{{$.Values.rest.image.tag | default $.Chart.AppVersion}}"
        imagePullPolicy: {{ .Values.rest.image.pullPolicy }}
        # Command set in the Docker image
        envFrom:
          - configMapRef:
              name: {{ template "ska-oso-services.name" . }}-{{ .Values.rest.component }}-{{ .Release.Name }}-environment
        env:
        {{- if .Values.secretProvider.enabled }}
        {{- range .Values.secretProvider.provider.secrets }}
          - name: {{ .targetEnv | default .secretKey }}
            valueFrom:
              secretKeyRef:
                name: {{ template "ska-oso-services.name" $ }}-{{ $.Values.rest.component }}-{{ $.Release.Name }}-bucket-credentials
                key: {{ .secretKey }}
          {{- end }}
          {{- else }}
          - name: AWS_PHT_BUCKET_NAME
            value: "{{ .Values.global.env.aws_pht_bucket_name }}"
          - name : AWS_SERVER_PUBLIC_KEY
            value: "{{ .Values.global.env.aws_server_public_key }}"
          - name: AWS_SERVER_SECRET_KEY
            value: "{{ .Values.global.env.aws_server_secret_key }}"
          - name: SMTP_PASSWORD
            value: "{{ .Values.global.env.smtp_password }}"
          {{- end }}
        volumeMounts:
          {{- if .Values.secretProvider.enabled }}
          - name: secrets-store-inline
            mountPath: "/mnt/secrets-store"
            readOnly: true
          {{- end }}
        ports:
          - containerPort: 5000
        resources:
{{ toYaml .Values.rest.resources | indent 10 }}
  {{- with .Values.nodeSelector }}
nodeSelector:
  {{ toYaml . | indent 8 }}
  {{- end }}
  {{- with .Values.affinity }}
affinity:
  {{ toYaml . | indent 8 }}
  {{- end }}
  {{- with .Values.tolerations }}
tolerations:
  {{ toYaml . | indent 8 }}
  {{- end }}
  {{ end }}
